# Central Snakemake for digestiflow_demux.

import os
import subprocess
from multiprocessing import Pool
from typing import List, Tuple
import argparse
import toml


from digestiflow_demux.snakemake_support import (
    bcl2fastq_wrapper,
    get_result_files_demux,
    get_result_files_fastqc,
    get_tiles_arg,
    get_tool_marker,
    listify,
    wrapper_path,
)

# -------------------------------------------------------------------------------------------------
# Command-line arguments
parser = argparse.ArgumentParser(description="digestiflow-demux")
parser.add_argument("--config", required=True, help="Path to the configuration file")
parser.add_argument("--project-uuid", help="Project UUID")
parser.add_argument("output_dir", help="Output directory path")
parser.add_argument("input_dirs", nargs='+', help="Input directory paths")

args = parser.parse_args()

# Template configuration file
config = toml.load(args.config)


# Override config with command-line arguments
if args.project_uuid:
    config["project_uuid"] = args.project_uuid
config["output_dir"] = args.output_dir
config["input_dirs"] = args.input_dirs

# -------------------------------------------------------------------------------------------------
# Helper Functions

# def out_prefix(path):
#     return os.path.join(config["output_dir"], path)

def get_output_path(filename: str) -> str:
    """Construct the output path based on the given filename."""
    return os.path.join(config["output_dir"], filename)


def create_tar_and_md5sum(params: Tuple[str, str, str]) -> None:
    """Create a tarball and generate md5sums for bcls and fastq files."""
    fastq_dir, tar_file, md5_file = params
    tar_command = f"tar czvf {tar_file} {fastq_dir} ."
    md5_command = f"md5sum {tar_file} > {md5_file}"
    subprocess.run(tar_command, shell=True, check=True)
    subprocess.run(md5_command, shell=True, check=True)

# -------------------------------------------------------------------------------------------------
# Define local rules.

localrules: all, marker_file

# -------------------------------------------------------------------------------------------------
# The main rule depends on the "result is complete" file.

rule all:
    input: get_output_path("DIGESTIFLOW_DEMUX_DONE.txt"),

# -------------------------------------------------------------------------------------------------
# Create "result is complete" file.


@listify
def marker_file_input(wildcards) -> List[str]:
    """Generate the list of input files for the marker file."""
    if "seq" in config["delivery_type"]:
        yield get_output_path("multiqc/multiqc_report.html")
        yield get_output_path("multiqc/multiqc_data.zip")
        yield get_output_path(get_tool_marker(config))
    if "bcl" in config["delivery_type"]:
        yield get_output_path("TARBALLS_DONE.txt")

rule marker_file:
    input: marker_file_input
    output: get_output_path("DIGESTIFLOW_DEMUX_DONE.txt"),
    shell:
        r"""
        set -x; date --iso-8601=s >{output}
        """

# -------------------------------------------------------------------------------------------------
# Create lane-wise tarballs of the input.

rule create_tarballs:
    output: get_output_path("TARBALLS_DONE.txt")
    shell:
        r"""
        set -x
        set -eu
        # set -o pipefail

        export TMPDIR=$(mktemp -d)
        trap "rm -rf $TMPDIR" EXIT ERR

        (cd $(dirname {config[input_dir]}) && \
         find $(basename {config[input_dir]}) \
            -type f -and \
            -not -path '*Logs*' -and \
            -not -path '*Data*' -and \
            -not -path '*Thumbnail*' \
         | sort -g \
         > $TMPDIR/files.txt)

        for i in $(seq 1 {config[flowcell][num_lanes]}); do
            lane=$(printf %03d $i)

            cat $TMPDIR/files.txt \
            > $TMPDIR/files_L${{lane}}.txt

            (cd $(dirname {config[input_dir]}) && \
             find $(basename {config[input_dir]}) \
                -type f -and \
                -path '*Data*' -and \
                -path "*/L${{lane}}*" \
             | sort -g \
             >> $TMPDIR/files_L${{lane}}.txt)

            outf=$(dirname {output})/BCLS_LANE_${{lane}}.tar
            tar --owner=0 --group=0 -C $(dirname {config[input_dir]}) -vcf $outf -T $TMPDIR/files_L${{lane}}.txt
            md5sum $outf >$outf.md5
        done

        date --iso-8601=s >{output}
        """

# -------------------------------------------------------------------------------------------------
# Perform demultiplexing.
# Use bcl2fastq for flowcells with rta_version 1

rule demux_bcl2fastq1:
    input: sheet=get_output_path("SampleSheet.csv")
    output: get_result_files_demux(config),
            marker = get_output_path("bcl2fastq1.done")
    params:
        flowcell_token=config["flowcell"]["vendor_id"],
        input_dir=config["input_dir"],
        output_dir=config["output_dir"],
        tiles_arg=get_tiles_arg(config),
    threads: config["cores"]
    wrapper: wrapper_path(bcl2fastq_wrapper(config))

# -------------------------------------------------------------------------------------------------
# bcl2fastq2

# Get list of all bases masks configured, as bcl2fastq2 will be run once for each
bases_masks = config["flowcell"]["demux_reads_override"]
keep_undetermined = config["flowcell"]["demux_reads"]

rule demux_bcl2fastq2_aggregate:
    input: expand(get_output_path("illumina_basesmask/{bases_mask}/bcl2fastq2.done"), bases_mask = bases_masks)
    output: fastq = get_result_files_demux(config),
            marker = get_output_path("bcl2fastq2.done")
    params:
        keep_undetermined = keep_undetermined,
    run:
        # FASTQ file names are prefixed with their bases mask. Rename them to the expected output.
        import os
        import glob
        from snakemake import shell
        for final_path in output.fastq:
            d = os.path.dirname(final_path)
            f = os.path.basename(final_path)
            if not f.startswith("Undetermined_"):
                os.rename(glob.glob(os.path.join(d, "*__" + f))[0], final_path)
            else:
                undetermined = glob.glob(os.path.join(d, keep_undetermined + "__" + f))
                if not undetermined:
                    undetermined = glob.glob(os.path.join(d, "*__" + f))
                if undetermined:
                    os.rename(undetermined[0], final_path)
                else:  # write a fake fastq if you can't find any, but it is expected
                    import gzip
                    os.makedirs(d, exist_ok=True)
                    with gzip.open(final_path, "wt") as f:
                        f.write("@placeholder\n")
                        f.write("N\n")
                        f.write("+\n")
                        f.write("!\n")
        shell(
            r"""
            for dest in {output.fastq}; do
                pushd $(dirname $dest)
                md5sum $(basename $dest) >$(basename $dest).md5
                popd
            done
            touch {output.marker}
            """
            )

rule demux_bcl2fastq2_par:
    input: sheet = get_output_path("illumina_basesmask/{bases_mask}/SampleSheet.csv")
    output: marker = get_output_path("illumina_basesmask/{bases_mask}/bcl2fastq2.done")
    params:
        flowcell_token=config["flowcell"]["vendor_id"],
        input_dir=config["input_dir"],
        output_dir=config["output_dir"],
        tiles_arg=get_tiles_arg(config),
    threads: config["cores"]
    wrapper: wrapper_path(bcl2fastq_wrapper(config))

# -------------------------------------------------------------------------------------------------
# Picard

# either take configured lane or all lanes
lanes_to_process = config.get("lanes")
if not lanes_to_process:
    lanes_to_process = set()
    for lib in config["flowcell"]["libraries"]:
        lanes_to_process |= set(lib["lanes"])

rule demux_picard:
    input: metrics=expand(get_output_path("picard_barcodes/{lane}/metrics.txt"), lane=lanes_to_process),
           sheets=expand(get_output_path("picard_barcodes/{lane}/samplesheet.txt"), lane=lanes_to_process)
    output: get_result_files_demux(config),
            marker = get_output_path("picard.done")
    params:
        machine_name=config["flowcell"]["sequencing_machine"],
        flowcell_token=config["flowcell"]["vendor_id"],
        run_number=config["flowcell"]["run_number"],
        read_structure=config["flowcell"]["demux_reads"],
        input_dir=config["input_dir"],
        output_dir=config["output_dir"],
        tiles_arg=get_tiles_arg(config),
        lanes=lanes_to_process,
    threads: config["cores"]
    wrapper: wrapper_path("picard/basecalls_to_fastq")

rule prepare_picard:
    input: get_output_path("picard_barcodes/{lane}/barcodes.txt")
    output: get_output_path("picard_barcodes/{lane}/metrics.txt")
    params:
        flowcell_token=config["flowcell"]["vendor_id"],
        read_structure=config["flowcell"]["demux_reads"],
        input_dir=config["input_dir"],
    threads: config["cores"]
    wrapper: wrapper_path("picard/extract_barcodes")

# -------------------------------------------------------------------------------------------------
# Run FastQC.

rule fastqc:
    input:
        fastq=get_output_path("{sample}/{flowcell}/{lane}/{filename}.fastq.gz")
    output:
        html=get_output_path("{sample}/{flowcell}/{lane}/qc/fastqc/{filename}_fastqc.html"),
        html_md5=get_output_path("{sample}/{flowcell}/{lane}/qc/fastqc/{filename}_fastqc.html.md5"),
        zip=get_output_path("{sample}/{flowcell}/{lane}/qc/fastqc/{filename}_fastqc.zip"),
        zip_md5=get_output_path("{sample}/{flowcell}/{lane}/qc/fastqc/{filename}_fastqc.zip.md5"),
    threads: 1
    wrapper: wrapper_path("fastqc")


# -------------------------------------------------------------------------------------------------
# Collect all QC statistics using MultiQC.

rule illumina_demultiplexing_multiqc:
    input: get_result_files_fastqc(config)["zip"]
    output:
        html=get_output_path("multiqc/multiqc_report.html"),
        zip=get_output_path("multiqc/multiqc_data.zip"),
    threads: 1
    wrapper: wrapper_path("multiqc")


# -------------------------------------------------------------------------------------------------
# Create tarballs and md5sums

rule md5_fastq:
    input:
        fastq_files=expand(get_output_path("{sample}/{flowcell}/{lane}/{filename}.fastq.gz"), sample=SAMPLES)
    output:
        md5_files=expand(get_output_path("{sample}/{flowcell}/{lane}/{filename}.fastq.gz.md5"), sample=SAMPLES)
    run:
        for fastq_file in input.fastq_files:
            md5_file = f"{fastq_file}.md5"
            shell(f"md5sum {fastq_file} > {md5_file}")


rule tar_bcl:
    input:
        bcl_files=expand(get_output_path("bcl/{lane}/{filename}.bcl"), lane=[1, 2, 3, 4])
    output:
        tar_file=get_output_path("bcls.tar.gz"),
        md5_file=get_output_path("bcls.tar.gz.md5")
    run:
        tar_command = f"tar -czf {output.tar_file} -C {get_output_path('bcl')} ."
        md5_command = f"md5sum {output.tar_file} > {output.md5_file}"
        shell(tar_command)
        shell(md5_command)
